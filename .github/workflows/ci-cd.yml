name: CI/CD

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache Python modules
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade poetry
          poetry install
      - name: Run linting
        run: |
          poetry run black --check datasette_ml tests
          poetry run flake8 datasette_ml tests
          poetry run mypy datasette_ml tests
      - name: Run tests
        run: |
          poetry run pytest -v --cov=datasette_ml --cov=tests --cov-branch --cov-report=term-missing tests
          poetry run coverage xml
      - name: Publish code coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml

  deploy-demo:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name == 'push' && !contains(github.ref, 'tags') }}

    environment:
      name: preview/${{ github.ref_name }}
      url: ${{ steps.deployment.outputs.deployment_url }}

    steps:
      - name: Set demo folder base url variable
        run: echo "DEMO_FOLDER_URL=https://raw.githubusercontent.com/rclement/datasette-ml/${GITHUB_REF_NAME}/demo" >> ${GITHUB_ENV}
      - name: Set deployment output variables
        id: deployment
        run: |
          echo "deployment_url=https://lite.datasette.io/?install=datasette-ml&url=${DEMO_FOLDER_URL}/sqml.db&metadata=${DEMO_FOLDER_URL}/metadata.yml" >> $GITHUB_OUTPUT

  publish-package-test:
    runs-on: ubuntu-latest
    needs: [test]
    if: contains(github.ref, 'main')
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - uses: actions/cache@v3
        name: Configure pip caching
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-publish-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-publish-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade poetry
          poetry install
      - name: Build Python package
        run: poetry build
      - name: Publish Python package on PyPI
        env:
          POETRY_REPOSITORIES_TESTPYPI_URL: https://test.pypi.org/legacy/
          POETRY_PYPI_TOKEN_TESTPYPI: ${{ secrets.PYPI_TOKEN_TEST }}
          POETRY_HTTP_BASIC_TESTPYPI_USERNAME: __token__
          POETRY_HTTP_BASIC_TESTPYPI_PASSWORD: ${{ secrets.PYPI_TOKEN_TEST }}
        run: poetry publish -r testpypi --skip-existing

  publish-package:
    runs-on: ubuntu-latest
    needs: [test]
    if: contains(github.ref, 'tags')
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - uses: actions/cache@v3
        name: Configure pip caching
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-publish-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-publish-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade poetry
          poetry install
      - name: Build Python package
        run: poetry build
      - name: Publish Python package on PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
          POETRY_HTTP_BASIC_PYPI_USERNAME: __token__
          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish
